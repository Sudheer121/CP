
// O(K*N*N)
int dp[35][35];
int a[35];

void solve() // dp[n][k] ;
{
    int i,j,l;
    fo(i,0,k) { dp[1][i] = 0; dp[0][i]=0;}
    fo(i,0,n) { dp[i][0] = 0; }

    fo(i,2,n+1)
    {
        fo(j,1,i)
        {
            fo(l,0,k)
            {
                dp[i][l+1] = max( dp[i][l+1],dp[j-1][l] + a[i]-a[j] );
                dp[i][l+1] = max( dp[i][l+1],dp[i-1][l+1] );
            }
        }
    }
    int ans = 0;
    fo(i,0,k+1) {
        ans = max(ans,dp[n][i]);
    }
    cout<<ans<<endl;
}

int main()
{
int i,j;
cin>>q;
while(q--){
    cin>>k>>n;
    fo(i,1,n+1) cin>>a[i];
    solve();
}
return 0;
}

// O(K*N) left

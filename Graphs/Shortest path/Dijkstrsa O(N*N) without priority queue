//Dijksra with O(N^2)
//Unlimited hops allowed 
#define f first
#define s second
const int inf = 1e9; 

const int maxn = 102; 
class Solution {
public:
    vector<pair<int,int>> g[102];
    vector<int> d(maxn,inf); 
    bool vis[maxn]; //burnt edge 
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst) {
        int i,j; 
        
        for(vector<int> x : flights){
            g[x[0]].push_back({g[x[2]],g[x[1]]}); 
        }
        
        d[src] = 0; 
        for(i=0;i<n;i++){
            
            int v = -1; //unburnt vertex at shortest distance
            for(j=0;i<n;i++){
                if(!vis[j] && (v==-1 || d[j]<d[v])){
                    v = j; 
                }
            }
            
            if(v==-1 || d[v] == inf) break;
            vis[v] = 1; //burned
            
            for(auto edge : g[v]){
                if(d[v] + edge.f < d[edge.s]){
                    d[edge.s] = d[v] + edge.f;
                }
            }
        }
    }
};

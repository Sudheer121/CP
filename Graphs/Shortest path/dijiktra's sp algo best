#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 1e9 + 10;
int n,m;

vector<pair<int,int>> g[maxn]; // pair<vertex,distance>


void dijkstra(int src)
{
    vector<int> d(n+1,INF); // distance from source
    set<pair<int,int>> s; // pair<distance,vertex> storing pair with wt as first

    d[src] = 0;
    s.insert({0,src});
    int u;

    while(!s.empty())
    {
        u = s.begin() -> second; //burn the closest of the discovered vertices
        s.erase(s.begin());

        for(auto p: g[u])
        {
            if(d[p.first] > d[u] + p.second )
            {
                s.erase({d[p.first],p.first});
                d[p.first] = d[u] + p.second;
                s.insert({d[p.first],p.first});
            }
        }
    }

}
/*
set s has the vertices whose distances are known
burn the closest of these vertices and update info of all its neighbours in s
*/
int main() {
    int i,j;
    int x,y,wt;

    cin>>n>>m;
    for(i=0;i<m;i++)
    {
        cin>>x>>y>>m;
        x.push_back({y,m});
        y.push_back({x,m});
    }
    return 0;
}

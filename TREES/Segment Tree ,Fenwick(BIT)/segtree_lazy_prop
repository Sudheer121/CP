#include <bits/stdc++.h>
#define ll long long
using namespace std;
const int maxn = 2e5; 
ll a[maxn];
ll tree[2*maxn]; 
ll lazy[2*maxn]; 


void build(int idx,int ss,int se)
{
 int mid = (ss + se)/2;
 if(ss==se)
 {
   tree[idx] = a[mid]; 
 }
 
 build(2*idx,ss,mid);
 build(2*idx+1,mid+1,se);
 
 tree[idx] = tree[2*idx] + tree[2*idx+1];
}


ll query(int si,int ss,int se,int qs,int qe)
{
//first always check for pending updates in lazy tree
if(lazy[si] != 0) 
{
int x = lazy[si]; 
lazy[si] = 0; 
tree[si] += x * (se - si + 1);

if(ss != se) // propagate the lazy update info to its children 
{
   lazy[2*si] = x;
   lazy[2*si + 1] = x;
}
}
int mid = (ss + se)/2;
if(se < qs || ss > qe) { return 0; } //compeletely outside query range

if(ss >= qs && se <= qe)  //compeletely inside
{
  return tree[si]; 
}

int lans = query(2*si,ss,mid,qs,qe);
int rans = query(2*si+1,mid+1,se,qs,qe);
return lans + rans; 
}


void update(int si,int ss,int se,int qs,int qe,int val)
{
//first always check for pending updates in lazy tree
if(lazy[si] != 0) 
{
int x = lazy[si]; 
lazy[si] = 0; 
tree[si] += x * (se - si + 1);

if(ss != se) // propagate the lazy update info to its children 
{
   lazy[2*si] = x;
   lazy[2*si + 1] = x;
}
}
int mid = (ss + se)/2; 

if( se < qs || ss > qe ) { return ; } //completely outside
if( ss >= qs && se <= qe) //completely inside
{ 
  tree[si] += (se - ss + 1)*val;
  if(ss != se)
  {
    lazy[2*si] += val;
    lazy[2*si + 1] += val; 
  }
  return; 
}


update(2*si,ss,mid,qs,qe,val);
update(2*si+1,mid+1,se,qs,qe,val);
tree[si] = tree[2*si] + tree[2*si + 1]; 
}

int main()
{
  int i,j,n;
  cin>>n;
  for(int i=0;i<n;i++) { cin>>a[i]; }
  build(1,0,n-1); // root node of seqtree is at index 1.
  
}
/*
All Explanations

si = segment index
ss = segment start
se = segment end
qs = query start
qe = query end

The new thing in lazy propagation is range updates, here we are delaying the updates as long as we can by just storing the update information in lazy tree

UPDATES :
If at corresponding node in lazy tree non zero value exists, first reflect that value in segment tree i.e x*(se - ss + 1),then reset that node in lazt tree and propagate the data in its children. 
If a node lies completely inside update range, first update the node in segment tree  val*(se - ss + 1). Then store this information in children of node of same segment index. i.e lazy[2*si] = val ; lazy[2*si + 1] = val; 
Rest is same as segment tree


QUERIES :
If at corresponding node in lazy tree non zero value exists, first reflect that value in segment tree i.e x*(se - ss + 1),then reset that node in lazt tree and propagate the data in its children. 
Rest is same as segment tree

*/

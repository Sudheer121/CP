/*
IMP BEFORE USE : the id of root node is 0 be default and adjacency list is vector of vectors. 
If your root id is 1, then push a redundant vector in adj first i.e adj[0];  
*/

// First do Euler tour on tree 
// Then perform range minimum query on heights in Euler array, solving queries using segment tree.
// https://cp-algorithms.com/graph/lca.html


struct LCA {
    //we can get parent also 
    vector<int> height, euler, first, segtree, par;
    vector<bool> visited;
    int n;

    LCA(vector<vector<int>> &adj, int root = 0) {
        n = adj.size();
        height.resize(n);
        first.resize(n);
        par.resize(n); 
        par[root] = -1; 
        euler.reserve(n * 2);
        visited.assign(n, false);
        dfs(adj, root);
        int m = euler.size();
        segtree.resize(m * 4);
        build(1, 0, m - 1);
    }

    void dfs(vector<vector<int>> &adj, int node, int h = 0) {
        visited[node] = true;
        height[node] = h;
        first[node] = euler.size();
        euler.push_back(node);
        for (auto to : adj[node]) {
            if (!visited[to]) {
                par[to] = node; 
                dfs(adj, to, h + 1);
                euler.push_back(node);
            }
        }
    }

    void build(int node, int b, int e) {
        if (b == e) {
            segtree[node] = euler[b];
        } else {
            int mid = (b + e) / 2;
            build(node << 1, b, mid);
            build(node << 1 | 1, mid + 1, e);
            int l = segtree[node << 1], r = segtree[node << 1 | 1];
            segtree[node] = (height[l] < height[r]) ? l : r;
        }
    }
